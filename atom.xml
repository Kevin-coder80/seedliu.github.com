<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[瓜籽吐嘈]]></title>
  <subtitle><![CDATA[A Front-end Development]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2014-12-12T07:14:44.231Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Seed liu]]></name>
    <email><![CDATA[zjk.liuwei@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[]]></title>
    <link href="http://yoursite.com/2014/12/12/JavaScript%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2014/12/12/JavaScript闭包/</id>
    <published>2014-12-12T07:14:03.000Z</published>
    <updated>2014-12-12T07:14:03.000Z</updated>
    <content type="html"><![CDATA[<p>title: JavaScript闭包.md<br>date: 2014-12-10 22:08:44</p>
<h2 id="tags:_[‘js闭包’,_‘js作用域’-_‘js作用域链’]">tags: [‘js闭包’, ‘js作用域’. ‘js作用域链’]</h2>
<p>以下内容为自己记录使用，可能不算全面，请谅解！</p>
<p><strong><em>闭包</em></strong>，这个词在JS中也算是个神密人物。人们对他总是模模糊糊，像雾像雨又像风就是捉摸不定……</p>
<h3 id="一、首先了解闭包是个什么玩意儿？都有哪些东西？">一、首先了解闭包是个什么玩意儿？都有哪些东西？</h3>
<ol>
<li>一个主函数体</li>
<li>n个子函数体</li>
<li>返回信息</li>
<li><em>没有了</em></li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span></span>{</div><div class="line">  <span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　<span class="function"><span class="keyword">function</span> <span class="title">f2</span><span class="params">()</span></span>{</div><div class="line">　  <span class="keyword">var</span> k = <span class="number">8888</span>;</div><div class="line">　　alert(n); </div><div class="line">　  <span class="keyword">return</span> k；</div><div class="line">　}</div><div class="line">　<span class="keyword">return</span> f2;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>可见一个闭包就是由一个主函数体和n个在其内容中的子函数体构成。<br><a id="more"></a></p>
<h3 id="二、使用闭包的主要目的是什么？">二、使用闭包的主要目的是什么？</h3>
<ol>
<li>保护局部变量不被污染（将其变相的的变为私有变量）</li>
<li>局部变量只被允许在某个作用域内可以被访问，其他函数想都别想</li>
<li>可以常驻内存</li>
</ol>
<p>这个有点像是一家公司，公司内容的公共设备大家都可以用但是公司内各个部门之间的资源是不可以共享的。各部门的资源只有自己说了算，其他部门想要用就三个字<strong><em>“不可能！”</em></strong>；但如果各部门中有一个专门的人来向其他部门提供一些资源的话，那这个人就是<strong><em>“闭包”</em></strong>。也就是说闭包是将函数与其他函数进行共享的桥梁。</p>
<h3 id="三、坑">三、坑</h3>
<p>世上在好的东西都有缺陷！这个姑娘挺漂亮，哪儿哪儿都好！看哪儿哪都顺眼！唯一的缺陷就是人家的！</p>
<p>闭包在好也不可以到处都用。用多了容易消化不良而导致页面内存溢出！虽然现在的机器的配置已经很大程度上是可以接受的，但还是应该注意些。</p>
<p>导致内存溢出最容易出的问题就是：<strong><em>循环嵌套</em></strong>。</p>
<p>在循环嵌套中，如果不能及时的清除掉那些不在使用的引用就会被拉入这个<strong><em>“万人坑”</em></strong>中</p>
<h3 id="四、举个“粟子”">四、举个“粟子”</h3>
<p>嘚啵了半天，老子还是不明白！那就只能给你举个“粟子”了，网上这些粟子有很多，大家可以随意的搜一下。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function f1(){</div><div class="line">  <span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　function f2(){</div><div class="line">　  <span class="keyword">var</span> k = <span class="number">8888</span>;</div><div class="line">　　alert(n); </div><div class="line">　  <span class="keyword">return</span> k；</div><div class="line">　}</div><div class="line">　<span class="keyword">return</span> f2;</div><div class="line">}</div><div class="line"><span class="keyword">var</span> <span class="literal">result</span>=f1();</div><div class="line"><span class="keyword">var</span> sub = <span class="literal">result</span>(); // <span class="number">999</span></div><div class="line">alert( sub ); // <span class="number">8888</span></div></pre></td></tr></table></figure>

<p>上面的这个粟子表达了我上面所说的那些内容：</p>
<ol>
<li>f1的局部变量n，是从上向下纵向贯通的；也就是说f1中的变量可以被其内部所定义的所有子函数所使用。</li>
<li>相反从内往外是不可以的。f1如果想访问f2中的变量k，那是不可能的。</li>
<li>从上面的这个粟子中可以看出，n对于f1中的子函数来说是共有变量；k则是私有变量。</li>
</ol>
<p>在上面的这个粟子中又有一个非常重要的概念<strong><em>作用域</em></strong>及<strong><em>作用域链</em></strong></p>
<h3 id="五、作用域">五、作用域</h3>
<p>这个说的简单一些就是允许函数中资源被使用的范围。<br>如上面的那个粟子：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function f1(){</div><div class="line">  <span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　function f2(){</div><div class="line">　  <span class="keyword">var</span> k = <span class="number">8888</span>;</div><div class="line">　　alert(n); </div><div class="line">　  <span class="keyword">return</span> k；</div><div class="line">　}</div><div class="line">　<span class="keyword">return</span> f2;</div><div class="line">}</div><div class="line"><span class="keyword">var</span> <span class="literal">result</span>=f1();</div><div class="line"><span class="keyword">var</span> sub = <span class="literal">result</span>(); // <span class="number">999</span></div><div class="line">alert( sub ); // <span class="number">8888</span></div></pre></td></tr></table></figure>

<p>其中f1中的n的作用域只存在于f1中，因为f2也属于f1的一员，所以f2也是可以调用的；但是k的作用域只局限于f2中，f1是不可以对其进行访问的。</p>
<p>可见越是往里，越是小气……</p>
<h3 id="六、作用域链">六、作用域链</h3>
<p>当函数被执行时，会在内存中保存一种执行的链路。</p>
<p>按上面的粟子来说，这条链路是：<strong><em>f2() -&gt; f1()</em></strong></p>
<p>具体的思路是：</p>
<ol>
<li>先执行f1后，在内存中的某个地方会将其保存下</li>
<li>执行result后，会将其插到f1的前面并与f1建立一个链路</li>
<li>如果在result后执行的其他方法，均会按照上面的这个方式进行插入</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: JavaScript闭包.md<br>date: 2014-12-10 22:08:44</p>
<h2 id="tags:_[‘js闭包’,_‘js作用域’-_‘js作用域链’]">tags: [‘js闭包’, ‘js作用域’. ‘js作用域链’]</h2>
<p>以下内容为自己记录使用，可能不算全面，请谅解！</p>
<p><strong><em>闭包</em></strong>，这个词在JS中也算是个神密人物。人们对他总是模模糊糊，像雾像雨又像风就是捉摸不定……</p>
<h3 id="一、首先了解闭包是个什么玩意儿？都有哪些东西？">一、首先了解闭包是个什么玩意儿？都有哪些东西？</h3>
<ol>
<li>一个主函数体</li>
<li>n个子函数体</li>
<li>返回信息</li>
<li><em>没有了</em></li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span></span>{</div><div class="line">  <span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　<span class="function"><span class="keyword">function</span> <span class="title">f2</span><span class="params">()</span></span>{</div><div class="line">　  <span class="keyword">var</span> k = <span class="number">8888</span>;</div><div class="line">　　alert(n); </div><div class="line">　  <span class="keyword">return</span> k；</div><div class="line">　}</div><div class="line">　<span class="keyword">return</span> f2;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>可见一个闭包就是由一个主函数体和n个在其内容中的子函数体构成。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jade Template For HTML]]></title>
    <link href="http://yoursite.com/2014/12/04/jade-md/"/>
    <id>http://yoursite.com/2014/12/04/jade-md/</id>
    <published>2014-12-04T02:53:11.000Z</published>
    <updated>2014-12-04T03:13:10.000Z</updated>
    <content type="html"><![CDATA[<p>可能现在大家还是在写HTML语言，当然这个也没有错。但要处理HTML模块复用时就会有些困难了……</p>
<p>目前用来处理HTML分模块加载的东西有很多，如：<strong> smarty, </strong></p>
<h3 id="一、Jade是什么玩意儿">一、Jade是什么玩意儿</h3>
]]></content>
    <summary type="html">
    <![CDATA[<p>可能现在大家还是在写HTML语言，当然这个也没有错。但要处理HTML模块复用时就会有些困难了……</p>
<p>目前用来处理HTML分模块加载的东西有很多，如：<strong> smarty, </strong></p>
<h3 id="一、Jade是什么玩意儿">一、Ja]]>
    </summary>
    
      <category term="jade" scheme="http://yoursite.com/tags/jade/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Safari Web Content Guide]]></title>
    <link href="http://yoursite.com/2014/12/03/Safari%20Web%20Content%20Guide/"/>
    <id>http://yoursite.com/2014/12/03/Safari Web Content Guide/</id>
    <published>2014-12-03T15:14:23.000Z</published>
    <updated>2014-12-03T15:14:23.000Z</updated>
    <content type="html"><![CDATA[<h3 id="一、建立完善的页面内容">一、建立完善的页面内容</h3>
<ol>
<li><strong>使用标准的页面协议</strong><ul>
<li>在页面中加入标准的”DOCTYPE”协议，如：HTML5的DOCTYPE</li>
<li>将HTML，CSS和JS文件分别存放到不同的文件中</li>
<li>要使用良好的HTML结构</li>
<li>使用浏览器所支持的页面特性以及功能<a id="more"></a></li>
</ul>
</li>
<li><p><strong>Safari中能否使用Framesets框架</strong></p>
<ul>
<li><p>一般情况下framesets是带有滚动条的，而在IOS中framesets是没有滚动条的。</p>
<p><img src="https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/Art/framesets.jpg" alt="image"><br>所在说在PC的浏览器中Framesets是带有滚动条的，而在IOS中是将左右类型的框架进行平分且没有滚动条；因此如果想要在IOS中使用Framesets的话，需要用CSS将页面进人工分隔以达到框架的效果。</p>
</li>
<li><p>使用列和块</p>
<p> 使用列和块来布局页面，可以使页面具有更好的可读性以及IOS对其进行“双击”时更加友好。使用列进行布局并不会破坏页面的整体样式，反而会有利于阅读以及方便IOS的“<strong><em>双击</em></strong>”事件。</p>
<p> <img src="https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/Art/columns.jpg" alt="image"></p>
<p> 当用户对页面进行“双击”操作时，IOS会去寻找被双击过的元素，即闭合良好的区块（如，div, ul, li 等）或是图片。<strong><em>假如IOS找到的元素是页面中的一个区块，那IOS则会放大这部分内容使其宽度来填充整个屏幕的大小同时在将其居中。如果是图片则会放大以适应屏幕大小后在居中显示，反之如果在此之前元素已经是被放大的话，那通过双击操作后此元素则会被缩小。</em></strong></p>
</li>
</ul>
</li>
<li><p><strong>IOS对资源的限制</strong></p>
<ul>
<li><p>一个低于256M RAM的IOS对GIF, PNG和TIFF的图片的最大尺寸要求是3百万像素；如果是要支持5百万像素的刚必须是最低为256M的RAM。</p>
<blockquote>
<p> <em>如果IOS的RAM仍然是以前老式的手机且存储量小于256M时，就要确保图片的尺寸（**</em>width <em> height &lt;= 3 </em> 1024 <em> 1024**</em>）要小于256M的RAM。因为图片解码后的大小一定会大于图片的编码大小。*</p>
</blockquote>
</li>
<li>一个JPEG的图片经过二次采样后的解码大小可以达到320万像素。</li>
<li>低于256M的IOS设备中的canvas最大能支持3百万像素的图片，而高于256M的则可以支持5百万像素以上的图片。</li>
<li><p>JS的执行周期被限制为10秒去循环一次顶级事件。</p>
<blockquote>
<p> <em>如果自定义的JS的执行周期长于其默认的10秒，则IOS在解释其代码并执行的过程中会在随机的在代码的任意位置停止，这样就会对JS执行的总线程造成影响，从而产生一些意想不到的效果。</em></p>
</blockquote>
</li>
<li><p>IOS对页面打开的数量也是有个数限制的。</p>
<blockquote>
<p><em>iphone为8个；ipad为9个</em></p>
</blockquote>
<p> 还需要使用合适的图像，不要依赖浏览器对图像的缩放。</p>
<blockquote>
<p><em>不要把一个100 </em> 100的图像放到一个10 <em> 10的img元素中，也不要使用大的背景图片。</em></p>
</blockquote>
<p> 传统意义上来说，一个页面的大小在30M以下，则在IIOS中会比较好的显示出来。</p>
</li>
<li><p>使用IOS支持的JS功能</p>
<ul>
<li><p>弹窗</p>
<p>  IOS支持系统原生的弹出窗事件，如：alert，confirm，print和prompt。调用这些系统的弹出窗事件后，IOS会使用自己所特定的页面展示效果来显示；并不是像PC中的页面弹出效果。</p>
</li>
<li><p>Content Typpe和IOS特性</p>
<p>在IOS中对于PDF和视频也是有很好的支持。在iphone和ipad中，video和audio在被触发后只会进行全屏显示的；它们会在用户进行旋转的过程中进行屏幕的自适应。在ipad中video和audio会在页面中或是全屏模式下进行工作。</p>
<p><img src="https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/Art/video_playback.jpg" alt="image"></p>
<p>PDF文档的打开与video很相似，用户可以通过点击页面中的链接来显示PDF内容，同时也可以通过旋转屏幕来缩放文档的大小。</p>
<p><img src="https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/Art/pdf_documents.jpg" alt="image"></p>
<p>IOS在预览文档格式的范围也可以包括MS Office（Word，Excel和PPT），iWork（Pages，Numbers和Keynote ）和RTF文档（Rich Text Format，即富文本格式）。如果有第三方的应用在IOS中可以打开以上的文档的话，那么在该文档被触发后将会被调用以显示文档内容；但是也有一种情况就是第三方应用虽然支持此文件格式的预览，但IOS不允许其页面打开原生的APP的话，则在ipad中将会被下载后再用此软件进行打开。</p>
</li>
<li><p>HTML5 Audio和Video</p>
<p> 在iphone中的video是全屏播放的；ipad是内联在页面中，并且它们都需要人为的触发进行播放；在ipad中可以获得播放文件。</p>
</li>
<li><p>使用IOS所支持的富媒体类型</p>
<p> MIME type |  描 述 |    扩展名<br>————-|——-|———-<br>audio/3gpp| 3GPP media  | 3gp, 3gpp<br>audio/3gpp2 | 3GPP2 media | 3g2, 3gp2<br>audio/aiff      |  AIFF audio    |    aiff, aif, aifc, cdda<br>audio/x-aiff |    AIFF audio    |   aiff, aif, aifc, cdda<br>audio/amr    |    AMR audio    |    amr<br>audio/mp3    |    MP3 audio    |    mp3, swa<br>audio/mpeg3    |    MP3 audio    | mp3, swa<br>audio/x-mp3   |    MP3 audio    | mp3, swa<br>audio/x-mpeg3   |    MP3 audio    | mp3, swa<br>audio/mp4    | MPEG-4 media    |    mp4<br>audio/mpeg    |    MPEG-4 media    |    mp4<br>audio/x-mpeg    |     MPEG-4 media    |    mp4<br>audio/wav    |    WAVE audio    |    wav, bwf<br>audio/x-wav    |     WAVE audio    |    wav, bwf<br>audio/x-m4a    |    AAC audio    |    m4a<br>audio/x-m4b    |    AAC audio book    |    m4b<br>audio/x-m4p    |    AAC audio（protected）    |    m4p<br>video/3gpp    |    3GPP media    |    3gp, 3gp2<br>video/3gpp2    |    3GPP2 media    |    3g2, 3gp2<br>video/mp4    |    MPEG-4 media    |    mp4<br>video/quicktime    |    QuickTime Movie    | mov, qt, mqv<br>video/x-m4v    | Video    | m4v</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一、建立完善的页面内容">一、建立完善的页面内容</h3>
<ol>
<li><strong>使用标准的页面协议</strong><ul>
<li>在页面中加入标准的”DOCTYPE”协议，如：HTML5的DOCTYPE</li>
<li>将HTML，CSS和JS文件分别存放到不同的文件中</li>
<li>要使用良好的HTML结构</li>
<li>使用浏览器所支持的页面特性以及功能]]>
    
    </summary>
    
      <category term="mobile" scheme="http://yoursite.com/tags/mobile/"/>
    
      <category term="safari" scheme="http://yoursite.com/tags/safari/"/>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
  </entry>
  
</feed>
